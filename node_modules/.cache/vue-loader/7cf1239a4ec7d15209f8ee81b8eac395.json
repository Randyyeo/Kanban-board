{"remainingRequest":"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/src/App.vue","mtime":1637897266721},{"path":"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/vue/Kanban-board/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCBweC01IG10LTUiIH0sIFsKICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIiB9LCBbCiAgICAgIF92bS5fdigiS2FuYmFuIEJvYXJkIiksCiAgICBdKSwKICAgIF9jKAogICAgICAidWwiLAogICAgICB7IHN0YXRpY0NsYXNzOiAibmF2IG5hdi10YWJzIiB9LAogICAgICBfdm0uX2woX3ZtLmFyckFycmF5cywgZnVuY3Rpb24gKGFyciwgaW5kZXgpIHsKICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgewogICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgIF92bS5kaXNwbGF5ICE9PSBpbmRleCA/ICsiIiA6ICJjb25zdGFudCIsCiAgICAgICAgICAgICAgIm5hdi1pdGVtIiwKICAgICAgICAgICAgICAidGFiIiwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICB0cmFuc2Zvcm06ICJza2V3KC0yMGRlZykiLAogICAgICAgICAgICAgICJtYXJnaW4tbGVmdCI6ICIxMHB4IiwKICAgICAgICAgICAgICAiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMiOiAiMTJweCIsCiAgICAgICAgICAgICAgImJvcmRlci10b3AtbGVmdC1yYWRpdXMiOiAiMTJweCIsCiAgICAgICAgICAgICAgImJvcmRlci10b3AiOiAibm9uZSIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAidGV4dC1kZWNvcmF0aW9uIjogIm5vbmUiLAogICAgICAgICAgICAgICAgICAiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMiOiAiMTJweCIsCiAgICAgICAgICAgICAgICAgICJib3JkZXItdG9wLWxlZnQtcmFkaXVzIjogIjEycHgiLAogICAgICAgICAgICAgICAgICAiYm9yZGVyLXRvcCI6ICJub25lIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2UoaW5kZXgpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNTdHlsZTogeyB0cmFuc2Zvcm06ICJza2V3KDIwZGVnKSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoaW5kZXgpKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIH0pLAogICAgICAwCiAgICApLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgbXQtNSIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCIgfSwgWwogICAgICAgICFfdm0uYWRkX3N0YXR1cwogICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBmbG9hdC1yaWdodCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjYzdmOWZjIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uYWRkX3N0YXR1cyA9IHRydWUKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgQWRkIGV4dHJhIGJvYXJkICIpXQogICAgICAgICAgICApCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF92bS5hZGRfc3RhdHVzCiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5uYW1lLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIHBsYWNlaG9sZGVyOiAiTmFtZSIgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubmFtZSB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdm0ubmFtZSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gbXMtMiIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNjN2Y5ZmMiIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkQm9hcmQgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgQWRkICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICBdKSwKICAgIF0pLAogICAgX2MoImRpdiIsIFsKICAgICAgX3ZtLmVycm9yCiAgICAgICAgPyBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1kYW5nZXIiIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5lcnJvcikpXSkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBtYi01IG10LTMiIH0sIFsKICAgICAgICBfYygiaDEiLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAid2hpdGUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uZGlzcGxheSkgKyAiICIpLAogICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmFzIGZhLWVkaXQiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjdXJzb3I6ICJwb2ludGVyIiwgImZvbnQtc2l6ZSI6ICIyNXB4IiB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0ubW9kZWxBcnJbX3ZtLmRpc3BsYXldLnVwZGF0ZVRpdGxlID0gdHJ1ZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9KSwKICAgICAgICBdKSwKICAgICAgICBfdm0ubW9kZWxBcnJbX3ZtLmRpc3BsYXldLnVwZGF0ZVRpdGxlCiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IG1iLTMgdy01MCIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubmV3TmFtZSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibmV3TmFtZSIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIlVwZGF0ZSBCb2FyZCBOYW1lIiB9LAogICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5uZXdOYW1lIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS5uZXdOYW1lID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBtcy0yIiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2M3ZjlmYyIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS51cGRhdGUoX3ZtLmRpc3BsYXkpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVXBkYXRlICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF9jKCJoMyIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJ3aGl0ZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5kaXNwbGF5QXJyLmRlc2MpICsgIiAiKSwKICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZhcyBmYS1lZGl0IiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY3Vyc29yOiAicG9pbnRlciIsICJmb250LXNpemUiOiAiMjVweCIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLm1vZGVsQXJyW192bS5kaXNwbGF5XS51cGRhdGVEZXNjID0gdHJ1ZQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9KSwKICAgICAgICBdKSwKICAgICAgICBfdm0ubW9kZWxBcnJbX3ZtLmRpc3BsYXldLnVwZGF0ZURlc2MKICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkLWZsZXggbWItMyB3LTUwIiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5uZXdEZXNjLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJuZXdEZXNjIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiVXBkYXRlIEJvYXJkIERlc2NyaXB0aW9uIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm5ld0Rlc2MgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLm5ld0Rlc2MgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIG1zLTIiLAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjYzdmOWZjIiB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnVwZGF0ZURlc2MoX3ZtLmRpc3BsYXkpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVXBkYXRlICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IGNvbC1sZy00IGQtZmxleCIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIG1zLTIiLAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjYzdmOWZjIiB9LAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICJkYXRhLWJzLXRvZ2dsZSI6ICJtb2RhbCIsCiAgICAgICAgICAgICAgICAgICAgImRhdGEtYnMtdGFyZ2V0IjogIiNleGFtcGxlTW9kYWwxIiArIF92bS5kaXNwbGF5LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBBZGQgQ29sdW1uICIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIm1vZGFsLWNvbHVtbiIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGRpc3BsYXk6IF92bS5kaXNwbGF5IH0sCiAgICAgICAgICAgICAgICBvbjogeyBhZGRDb2w6IF92bS5hZGRDb2wgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImQtZmxleCIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIsICJvdmVyZmxvdy14IjogImF1dG8iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgX3ZtLl9sKF92bS5kaXNwbGF5QXJyLmNvbHMsIGZ1bmN0aW9uIChzdWIsIGluZGV4MSkgewogICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgImNvbHVtbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAga2V5OiBpbmRleDEsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBiYWNrOiBzdWIuYmFjaywKICAgICAgICAgICAgICAgICAgY29sb3I6IHN1Yi5jb2xvciwKICAgICAgICAgICAgICAgICAgZGlzcGxheTogX3ZtLmRpc3BsYXksCiAgICAgICAgICAgICAgICAgIGluZGV4MTogaW5kZXgxLAogICAgICAgICAgICAgICAgICBjb2xzOiBfdm0uZGlzcGxheUFyci5jb2xzLAogICAgICAgICAgICAgICAgICBtYXg6IHN1Yi5tYXgsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2FyZDogX3ZtLnJlbW92ZUNhcmQsCiAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbDogX3ZtLnVwZGF0ZUNvbCwKICAgICAgICAgICAgICAgICAgYWRkVGFzazogX3ZtLmFkZFRhc2ssCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkcmFnZ2FibGUiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsaXN0LWdyb3VwIGthbmJhbi1jb2x1bW4iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBsaXN0OiBzdWIubGlzdCwKICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiB7IG5hbWU6ICJ0YXNrcyIsIHB1dDogc3ViLmRpc2FibGUgfSwKICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IF92bS5jaGVja01vdmUsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgX3ZtLl9sKHN1Yi5saXN0LCBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJjYXJkIiwgewogICAgICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50Lm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICBpbmRleDI6IGluZGV4MiwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgxOiBpbmRleDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IF92bS5kaXNwbGF5LAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IHJlbW92ZTogX3ZtLnJlbW92ZSB9LAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICB9KSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgIF0pLAogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}